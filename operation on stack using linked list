#include <stdio.h>
#include <stdlib.h>


struct StackNode {
    int data;
    struct StackNode* next;
};


struct StackNode* newNode(int data) {
    struct StackNode* node = (struct StackNode*)malloc(sizeof(struct StackNode));
    node->data = data;
    node->next = NULL;
    return node;
}

int isEmpty(struct StackNode* top) {
    return (top == NULL);
}


void push(struct StackNode** top, int data) {
    struct StackNode* node = newNode(data);
    node->next = *top;  
    *top = node;        
    printf("%d pushed to the stack.\n", data);
}


int pop(struct StackNode** top) {
    if (isEmpty(*top)) {
        printf("Stack Underflow! No element to pop.\n");
        return -1; 
    } else {
        struct StackNode* temp = *top;
        int popped = temp->data;
        *top = (*top)->next;  
        free(temp);           
        return popped;
    }
}


int peek(struct StackNode* top) {
    if (isEmpty(top)) {
        printf("Stack is empty! No top element.\n");
        return -1;  // Return -1 to indicate the stack is empty
    }
    return top->data;
}


void display(struct StackNode* top) {
    if (isEmpty(top)) {
        printf("Stack is empty! Nothing to display.\n");
    } else {
        printf("Stack elements are:\n");
        struct StackNode* temp = top;
        while (temp != NULL) {
            printf("%d ", temp->data);
            temp = temp->next;
        }
        printf("\n");
    }
}

int main() {
    struct StackNode* top = NULL;  // Initialize an empty stack
    int choice, value;

    do {
        printf("\nStack Operations using Linked List:\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to push: ");
                scanf("%d", &value);
                push(&top, value);
                break;
            case 2:
                value = pop(&top);
                if (value != -1) {
                    printf("Popped element: %d\n", value);
                }
                break;
            case 3:
                value = peek(top);
                if (value != -1) {
                    printf("Top element: %d\n", value);
                }
                break;
            case 4:
                display(top);
                break;
            case 5:
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 5);

    return 0;
}

