#include <stdio.h>


int linearSearch(int arr[], int size, int key) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == key) {
            return i;  
        }
    }
    return -1; 
}


int binarySearch(int arr[], int size, int key) {
    int left = 0, right = size - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        
        if (arr[mid] == key) {
            return mid; 
        }

              if (arr[mid] < key) {
            left = mid + 1;
        }
                else {
            right = mid - 1;
        }
    }
    return -1; 
}

int main() {
    int choice, key, result, size;

    
    printf("Enter the number of elements in the array: ");
    scanf("%d", &size);

    int arr[size];

    
    printf("Enter the elements of the array:\n");
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    
    printf("Enter the element to search: ");
    scanf("%d", &key);

   
    printf("Choose search method:\n1. Linear Search\n2. Binary Search (sorted array)\n");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            
            result = linearSearch(arr, size, key);
            if (result != -1) {
                printf("Element found at index %d using Linear Search.\n", result);
            } else {
                printf("Element not found using Linear Search.\n");
            }
            break;

        case 2:
            
            for (int i = 0; i < size - 1; i++) {
                for (int j = 0; j < size - i - 1; j++) {
                    if (arr[j] > arr[j + 1]) {
                        
                        int temp = arr[j];
                        arr[j] = arr[j + 1];
                        arr[j + 1] = temp;
                    }
                }
            }


            result = binarySearch(arr, size, key);
            if (result != -1) {
                printf("Element found at index %d using Binary Search.\n", result);
            } else {
                printf("Element not found using Binary Search.\n");
            }
            break;

        default:
            printf("Invalid choice!\n");
    }

    return 0;
}

